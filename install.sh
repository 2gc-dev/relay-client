#!/bin/bash

# CloudBridge Client Installer
# Automatically downloads and installs the latest version of CloudBridge Client

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Output functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
REPO="2gc-dev/relay-client"
INSTALL_DIR="/usr/local/bin"
CONFIG_DIR="/etc/cloudbridge-client"

# Detect OS and architecture
detect_platform() {
    local os arch
    
    case "$(uname -s)" in
        Linux*)     os="linux" ;;
        Darwin*)    os="darwin" ;;
        CYGWIN*|MINGW*|MSYS*) os="windows" ;;
        *)          log_error "Unsupported OS: $(uname -s)"; exit 1 ;;
    esac
    
    case "$(uname -m)" in
        x86_64|amd64)   arch="amd64" ;;
        arm64|aarch64)  arch="arm64" ;;
        armv7l)         arch="arm" ;;
        *)              log_error "Unsupported architecture: $(uname -m)"; exit 1 ;;
    esac
    
    echo "${os}-${arch}"
}

# Get latest version
get_latest_version() {
    local version
    version=$(curl -s "https://api.github.com/repos/${REPO}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    
    if [[ -z "$version" ]]; then
        log_error "Failed to get latest version"
        exit 1
    fi
    
    echo "$version"
}

# Download file
download_file() {
    local url="$1"
    local output="$2"
    
    log_info "Downloading from: $url"
    
    if command -v wget &> /dev/null; then
        wget -O "$output" "$url"
    elif command -v curl &> /dev/null; then
        curl -L -o "$output" "$url"
    else
        log_error "Neither wget nor curl found. Please install one of them."
        exit 1
    fi
}

# Install file
install_binary() {
    local binary_path="$1"
    local install_path="$2"
    
    log_info "Installing binary to $install_path"
    
    # Create directory if it doesn't exist
    sudo mkdir -p "$(dirname "$install_path")"
    
    # Copy file
    sudo cp "$binary_path" "$install_path"
    sudo chmod +x "$install_path"
    
    log_success "Binary installed successfully"
}

# Create configuration
create_config() {
    local config_path="$1"
    
    log_info "Creating configuration file"
    
    sudo mkdir -p "$(dirname "$config_path")"
    
    cat << EOF | sudo tee "$config_path" > /dev/null
# CloudBridge Client Configuration
# Generated by installer on $(date)

relay:
  host: "edge.2gc.ru"
  port: 30082
  timeout: "30s"
  tls:
    enabled: true
    min_version: "1.3"
    verify_cert: false
    server_name: "edge.2gc.ru"

auth:
  type: "jwt"
  secret: "YOUR_JWT_SECRET_HERE"
  fallback_secret: "YOUR_FALLBACK_SECRET_HERE"
  keycloak:
    enabled: false
    server_url: "https://auth.2gc.ru"
    realm: "cloudbridge"
    client_id: "cloudbridge-client"

api:
  base_url: "https://edge.2gc.ru:30082"
  insecure_skip_verify: true
  timeout: "30s"
  max_retries: 3
  backoff_multiplier: 2.0
  max_backoff: "60s"

logging:
  level: "info"
  format: "json"
  output: "stdout"

metrics:
  enabled: true
  prometheus_port: 9091
  tenant_metrics: true
  buffer_metrics: true
  connection_metrics: true

rate_limiting:
  enabled: true
  max_retries: 3
  backoff_multiplier: 2.0
  max_backoff: "60s"

performance:
  enabled: true
  optimization_mode: "high_throughput"
  gc_percent: 100
  memory_ballast: false

p2p:
  mesh_port: 51820
  interface_name: "wg0"
  allowed_ips: ["10.0.0.0/24"]
  mtu: 1420
  persistent_keepalive: "25s"

tunnel:
  max_connections: 10
  buffer_size: 4096
  keepalive_interval: "30s"
EOF

    log_success "Configuration file created: $config_path"
}

# Create systemd service
create_systemd_service() {
    local service_path="/etc/systemd/system/cloudbridge-client.service"
    
    log_info "Creating systemd service"
    
    cat << EOF | sudo tee "$service_path" > /dev/null
[Unit]
Description=CloudBridge Client
After=network.target

[Service]
Type=simple
User=cloudbridge
Group=cloudbridge
WorkingDirectory=$CONFIG_DIR
ExecStart=$INSTALL_DIR/cloudbridge-client p2p --config $CONFIG_DIR/config.yaml
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

    # Create user
    sudo useradd -r -s /bin/false cloudbridge 2>/dev/null || true
    
    # Set permissions
    sudo chown -R cloudbridge:cloudbridge "$CONFIG_DIR"
    
    # Reload systemd
    sudo systemctl daemon-reload
    
    log_success "Systemd service created"
}

# Main function
main() {
    log_info "CloudBridge Client Installer"
    echo "=================================="
    
    # Check permissions
    if [[ $EUID -eq 0 ]]; then
        log_error "Please don't run this script as root. It will use sudo when needed."
        exit 1
    fi
    
    # Detect platform
    local platform
    platform=$(detect_platform)
    log_info "Detected platform: $platform"
    
    # Get version
    local version
    version=$(get_latest_version)
    log_info "Latest version: $version"
    
    # Determine download URL
    local binary_name="cloudbridge-client-${platform}"
    if [[ "$platform" == *"windows"* ]]; then
        binary_name="${binary_name}.exe"
    fi
    
    local download_url="https://github.com/${REPO}/releases/download/${version}/${binary_name}"
    
    # Create temporary directory
    local temp_dir
    temp_dir=$(mktemp -d)
    local binary_path="${temp_dir}/${binary_name}"
    
    # Download
    log_info "Downloading CloudBridge Client..."
    download_file "$download_url" "$binary_path"
    
    # Install
    install_binary "$binary_path" "${INSTALL_DIR}/cloudbridge-client"
    
    # Create configuration
    create_config "${CONFIG_DIR}/config.yaml"
    
    # Create systemd service (Linux only)
    if [[ "$platform" == *"linux"* ]]; then
        create_systemd_service
    fi
    
    # Cleanup
    rm -rf "$temp_dir"
    
    # Verify installation
    log_info "Verifying installation..."
    if "${INSTALL_DIR}/cloudbridge-client" version > /dev/null 2>&1; then
        log_success "Installation verified successfully"
    else
        log_error "Installation verification failed"
        exit 1
    fi
    
    echo ""
    log_success "CloudBridge Client installed successfully!"
    echo "=============================================="
    echo "Binary: ${INSTALL_DIR}/cloudbridge-client"
    echo "Config: ${CONFIG_DIR}/config.yaml"
    echo "Version: $version"
    echo "=============================================="
    echo ""
    echo "Next steps:"
    echo "1. Edit configuration: sudo nano ${CONFIG_DIR}/config.yaml"
    echo "2. Add your JWT token and secrets"
    echo "3. Test: cloudbridge-client version"
    echo "4. Start: cloudbridge-client p2p --token YOUR_TOKEN --config ${CONFIG_DIR}/config.yaml"
    
    if [[ "$platform" == *"linux"* ]]; then
        echo ""
        echo "Systemd service:"
        echo "  Start: sudo systemctl start cloudbridge-client"
        echo "  Status: sudo systemctl status cloudbridge-client"
        echo "  Logs: sudo journalctl -u cloudbridge-client -f"
    fi
    
    echo ""
    echo "Documentation:"
    echo "  - Quick Start: https://github.com/${REPO}/blob/main/QUICK_START.md"
    echo "  - Build System: https://github.com/${REPO}/blob/main/BUILD_SYSTEM.md"
    echo "  - Production: https://github.com/${REPO}/blob/main/PRODUCTION_REQUIREMENTS.md"
}

# Handle arguments
case "${1:-}" in
    --help|-h)
        echo "CloudBridge Client Installer"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo "  --version     Show installer version"
        echo ""
        echo "This script will:"
        echo "  1. Detect your platform (OS and architecture)"
        echo "  2. Download the latest CloudBridge Client release"
        echo "  3. Install it to ${INSTALL_DIR}"
        echo "  4. Create configuration at ${CONFIG_DIR}"
        echo "  5. Set up systemd service (Linux only)"
        echo ""
        echo "Requirements:"
        echo "  - curl or wget"
        echo "  - sudo access"
        echo "  - Internet connection"
        exit 0
        ;;
    --version)
        echo "CloudBridge Client Installer v1.0.0"
        exit 0
        ;;
    "")
        main
        ;;
    *)
        log_error "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac
