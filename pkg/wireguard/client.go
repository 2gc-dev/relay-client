package wireguard

import (
	"encoding/json"
	"fmt"
	"net"
	"time"
)

// WireGuardClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç P2P –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞
type WireGuardClient struct {
	config     *Config
	connection net.Conn
	mode       ConnectionMode
	peers      map[string]*Peer
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard –∫–ª–∏–µ–Ω—Ç–∞
type Config struct {
	PrivateKey    string `json:"private_key"`
	PublicKey     string `json:"public_key"`
	ListenPort    int    `json:"listen_port"`
	RelayServer   string `json:"relay_server"`
	RelayPort     int    `json:"relay_port"`
	Peers         []Peer `json:"peers"`
	AutoDiscovery bool   `json:"auto_discovery"`
	Mode          string `json:"mode"` // "auto", "client-server", "server-server"
}

// Peer –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ä–µ
type Peer struct {
	PublicKey  string   `json:"public_key"`
	AllowedIPs []string `json:"allowed_ips"`
	Endpoint   string   `json:"endpoint"`
	Persistent bool     `json:"persistent"` // true –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
}

// ConnectionMode —Ä–µ–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
type ConnectionMode int

const (
	ModeAuto ConnectionMode = iota
	ModeClientServer
	ModeServerServer
)

// NewWireGuardClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π WireGuard P2P –∫–ª–∏–µ–Ω—Ç
func NewWireGuardClient(config *Config) *WireGuardClient {
	return &WireGuardClient{
		config: config,
		peers:  make(map[string]*Peer),
	}
}

// Connect –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ relay —Å–µ—Ä–≤–µ—Ä—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º
func (c *WireGuardClient) Connect() error {
	fmt.Println("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WireGuard P2P relay —Å–µ—Ä–≤–µ—Ä—É...")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ relay —Å–µ—Ä–≤–µ—Ä—É
	conn, err := net.DialTimeout("udp", fmt.Sprintf("%s:%d", c.config.RelayServer, c.config.RelayPort), 10*time.Second)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ relay —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	c.connection = conn

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
	if err := c.determineMode(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: %v", err)
	}

	fmt.Printf("‚úÖ –†–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: %s\n", c.getModeString())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
	return c.initializeMode()
}

// determineMode –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
func (c *WireGuardClient) determineMode() error {
	fmt.Println("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã...")

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if c.config.Mode == "auto" {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		if len(c.config.Peers) == 0 {
			c.mode = ModeClientServer
			fmt.Println("   üìä –†–µ–∂–∏–º: –ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä (–Ω–µ—Ç –ø–∏—Ä–æ–≤)")
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∏—Ä–æ–≤
			persistentCount := 0
			for _, peer := range c.config.Peers {
				if peer.Persistent {
					persistentCount++
				}
			}

			if persistentCount > 0 {
				c.mode = ModeServerServer
				fmt.Printf("   üìä –†–µ–∂–∏–º: –°–µ—Ä–≤–µ—Ä-–°–µ—Ä–≤–µ—Ä (%d –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤)\n", persistentCount)
			} else {
				c.mode = ModeClientServer
				fmt.Println("   üìä –†–µ–∂–∏–º: –ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã)")
			}
		}
	} else {
		// –†—É—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		switch c.config.Mode {
		case "client-server":
			c.mode = ModeClientServer
		case "server-server":
			c.mode = ModeServerServer
		default:
			return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: %s", c.config.Mode)
		}
	}

	return nil
}

// initializeMode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
func (c *WireGuardClient) initializeMode() error {
	switch c.mode {
	case ModeClientServer:
		return c.initializeClientServerMode()
	case ModeServerServer:
		return c.initializeServerServerMode()
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: %d", c.mode)
	}
}

// initializeClientServerMode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä —Ä–µ–∂–∏–º
func (c *WireGuardClient) initializeClientServerMode() error {
	fmt.Println("üñ•Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä —Ä–µ–∂–∏–º–∞...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º handshake –¥–ª—è –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	handshake := &WireGuardHandshake{
		Type:       "client_handshake",
		PublicKey:  c.config.PublicKey,
		ListenPort: c.config.ListenPort,
		Mode:       "client-server",
		Timestamp:  time.Now().Unix(),
	}

	return c.sendHandshake(handshake)
}

// initializeServerServerMode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä-—Å–µ—Ä–≤–µ—Ä —Ä–µ–∂–∏–º
func (c *WireGuardClient) initializeServerServerMode() error {
	fmt.Println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä-—Å–µ—Ä–≤–µ—Ä —Ä–µ–∂–∏–º–∞...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º handshake –¥–ª—è —Å–µ—Ä–≤–µ—Ä-—Å–µ—Ä–≤–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	handshake := &WireGuardHandshake{
		Type:       "server_handshake",
		PublicKey:  c.config.PublicKey,
		ListenPort: c.config.ListenPort,
		Mode:       "server-server",
		Peers:      c.config.Peers,
		Timestamp:  time.Now().Unix(),
	}

	return c.sendHandshake(handshake)
}

// WireGuardHandshake —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ handshake —Å–æ–æ–±—â–µ–Ω–∏—è
type WireGuardHandshake struct {
	Type       string `json:"type"`
	PublicKey  string `json:"public_key"`
	ListenPort int    `json:"listen_port"`
	Mode       string `json:"mode"`
	Peers      []Peer `json:"peers,omitempty"`
	Timestamp  int64  `json:"timestamp"`
}

// sendHandshake –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç handshake —Å–æ–æ–±—â–µ–Ω–∏–µ
func (c *WireGuardClient) sendHandshake(handshake *WireGuardHandshake) error {
	data, err := json.Marshal(handshake)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ handshake: %v", err)
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º %s handshake\n", handshake.Type)

	_, err = c.connection.Write(data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ handshake: %v", err)
	}

	// –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
	return c.waitForHandshakeResponse()
}

// waitForHandshakeResponse –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ handshake
func (c *WireGuardClient) waitForHandshakeResponse() error {
	if err := c.connection.SetReadDeadline(time.Now().Add(10 * time.Second)); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ —á—Ç–µ–Ω–∏—è: %v", err)
	}

	buffer := make([]byte, 1024)
	n, err := c.connection.Read(buffer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è handshake –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	var response map[string]interface{}
	if err := json.Unmarshal(buffer[:n], &response); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ handshake –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω handshake –æ—Ç–≤–µ—Ç: %+v\n", response)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
	if status, ok := response["status"].(string); ok && status == "ok" {
		fmt.Println("‚úÖ Handshake —É—Å–ø–µ—à–µ–Ω!")
		return nil
	}

	return fmt.Errorf("handshake –Ω–µ —É–¥–∞–ª—Å—è: %v", response)
}

// getModeString –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
func (c *WireGuardClient) getModeString() string {
	switch c.mode {
	case ModeClientServer:
		return "–ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä"
	case ModeServerServer:
		return "–°–µ—Ä–≤–µ—Ä-–°–µ—Ä–≤–µ—Ä"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (c *WireGuardClient) Close() error {
	if c.connection != nil {
		return c.connection.Close()
	}
	return nil
}

