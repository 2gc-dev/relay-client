// Package proto contains generated protobuf code
// This file provides mock implementations until real protoc generation is added
package proto

import (
	"context"
	"time"
)

// Mock implementations for proto-generated types
// In real implementation, these would be generated by protoc

// HelloRequest represents a hello request
type HelloRequest struct {
	Version   string
	Features  []string
	ClientId  string
	Timestamp *Timestamp
}

// HelloResponse represents a hello response
type HelloResponse struct {
	Status            string
	ServerVersion     string
	SupportedFeatures []string
	SessionId         string
	Timestamp         *Timestamp
	ErrorMessage      string
}

// AuthRequest represents an auth request
type AuthRequest struct {
	Token     string
	AuthType  string
	ClientId  string
	Timestamp *Timestamp
}

// AuthResponse represents an auth response
type AuthResponse struct {
	Status       string
	ClientId     string
	TenantId     string
	SessionToken string
	ExpiresAt    *Timestamp
	ErrorMessage string
}

// CreateTunnelRequest represents a tunnel creation request
type CreateTunnelRequest struct {
	TunnelId   string
	TenantId   string
	LocalPort  int32
	RemoteHost string
	RemotePort int32
	Config     *TunnelConfig
	Timestamp  *Timestamp
}

// CreateTunnelResponse represents a tunnel creation response
type CreateTunnelResponse struct {
	Status       string
	TunnelId     string
	Endpoint     string
	TunnelInfo   *TunnelInfo
	ErrorMessage string
}

// HeartbeatRequest represents a heartbeat request
type HeartbeatRequest struct {
	ClientId      string
	TenantId      string
	Timestamp     *Timestamp
	Metrics       *ClientMetrics
	TransportMode string
}

// HeartbeatResponse represents a heartbeat response
type HeartbeatResponse struct {
	Status          string
	ServerTimestamp *Timestamp
	IntervalSeconds int32
	ServerMetrics   *ServerMetrics
	ErrorMessage    string
}

// Supporting types
type Timestamp struct {
	Seconds int64
	Nanos   int32
}

type TunnelConfig struct {
	BufferSize         int32
	MaxBuffers         int32
	TimeoutSeconds     int32
	CompressionEnabled bool
	EncryptionEnabled  bool
}

type TunnelInfo struct {
	TunnelId     string
	TenantId     string
	LocalPort    int32
	RemoteHost   string
	RemotePort   int32
	Status       string
	CreatedAt    *Timestamp
	LastActivity *Timestamp
	Config       *TunnelConfig
}

type ClientMetrics struct {
	BytesSent         int64
	BytesReceived     int64
	PacketsSent       int64
	PacketsReceived   int64
	ActiveTunnels     int32
	ActiveP2pSessions int32
	CpuUsage          float64
	MemoryUsage       float64
	TransportMode     string
	LastSwitch        *Timestamp
}

type ServerMetrics struct {
	ConnectedClients int32
	ActiveTunnels    int32
	ServerLoad       float64
	Timestamp        *Timestamp
}

// Service interfaces (normally generated by protoc)

// ControlServiceClient interface
type ControlServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest) (*HelloResponse, error)
	Authenticate(ctx context.Context, in *AuthRequest) (*AuthResponse, error)
}

// TunnelServiceClient interface
type TunnelServiceClient interface {
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest) (*CreateTunnelResponse, error)
}

// HeartbeatServiceClient interface
type HeartbeatServiceClient interface {
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest) (*HeartbeatResponse, error)
}

// Mock client implementations

type mockControlServiceClient struct {
	conn interface{} // Mock connection
}

func NewControlServiceClient(conn interface{}) ControlServiceClient {
	return &mockControlServiceClient{conn: conn}
}

func (c *mockControlServiceClient) Hello(ctx context.Context, in *HelloRequest) (*HelloResponse, error) {
	// Mock implementation - in real code this would be generated
	return &HelloResponse{
		Status:            "ok",
		ServerVersion:     "1.0.0",
		SupportedFeatures: []string{"tls", "heartbeat", "tunnel_info", "grpc"},
		SessionId:         "grpc-session-123",
		Timestamp:         timestampNow(),
	}, nil
}

func (c *mockControlServiceClient) Authenticate(ctx context.Context, in *AuthRequest) (*AuthResponse, error) {
	// Mock implementation - in real code this would be generated
	return &AuthResponse{
		Status:       "ok",
		ClientId:     "grpc-client-123",
		TenantId:     "tenant-1",
		SessionToken: "grpc-session-token",
		ExpiresAt:    timestampFromTime(time.Now().Add(24 * time.Hour)),
	}, nil
}

type mockTunnelServiceClient struct {
	conn interface{} // Mock connection
}

func NewTunnelServiceClient(conn interface{}) TunnelServiceClient {
	return &mockTunnelServiceClient{conn: conn}
}

func (c *mockTunnelServiceClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	// Mock implementation - in real code this would be generated
	return &CreateTunnelResponse{
		Status:   "ok",
		TunnelId: in.TunnelId,
		Endpoint: "grpc://tunnel-endpoint",
		TunnelInfo: &TunnelInfo{
			TunnelId:   in.TunnelId,
			TenantId:   in.TenantId,
			LocalPort:  in.LocalPort,
			RemoteHost: in.RemoteHost,
			RemotePort: in.RemotePort,
			Status:     "active",
			CreatedAt:  timestampNow(),
		},
	}, nil
}

type mockHeartbeatServiceClient struct {
	conn interface{} // Mock connection
}

func NewHeartbeatServiceClient(conn interface{}) HeartbeatServiceClient {
	return &mockHeartbeatServiceClient{conn: conn}
}

func (c *mockHeartbeatServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest) (*HeartbeatResponse, error) {
	// Mock implementation - in real code this would be generated
	return &HeartbeatResponse{
		Status:          "ok",
		ServerTimestamp: timestampNow(),
		IntervalSeconds: 30,
		ServerMetrics: &ServerMetrics{
			ConnectedClients: 10,
			ActiveTunnels:    5,
			ServerLoad:       0.5,
			Timestamp:        timestampNow(),
		},
	}, nil
}

// Utility functions

func timestampNow() *Timestamp {
	now := time.Now()
	return &Timestamp{
		Seconds: now.Unix(),
		Nanos:   int32(now.Nanosecond()),
	}
}

func timestampFromTime(t time.Time) *Timestamp {
	return &Timestamp{
		Seconds: t.Unix(),
		Nanos:   int32(t.Nanosecond()),
	}
}

func (ts *Timestamp) AsTime() time.Time {
	return time.Unix(ts.Seconds, int64(ts.Nanos))
}

// Note: In a real implementation, you would generate this code using:
// protoc --go_out=. --go_opt=paths=source_relative \
//        --go-grpc_out=. --go-grpc_opt=paths=source_relative \
//        pkg/relay/transport/proto/*.proto
