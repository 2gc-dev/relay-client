//go:build ignore
// +build ignore

package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"time"

	"github.com/2gc-dev/cloudbridge-client/pkg/api"
	"github.com/2gc-dev/cloudbridge-client/pkg/auth"
	"github.com/2gc-dev/cloudbridge-client/pkg/config"
)

// Simple logger for testing
type testLogger struct{}

func (l *testLogger) Info(msg string, fields ...interface{}) {
	fmt.Printf("[INFO] %s %v\n", msg, fields)
}

func (l *testLogger) Error(msg string, fields ...interface{}) {
	fmt.Printf("[ERROR] %s %v\n", msg, fields)
}

func (l *testLogger) Debug(msg string, fields ...interface{}) {
	fmt.Printf("[DEBUG] %s %v\n", msg, fields)
}

func (l *testLogger) Warn(msg string, fields ...interface{}) {
	fmt.Printf("[WARN] %s %v\n", msg, fields)
}

func main() {
	fmt.Println("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Heartbeat")
	fmt.Println("============================")

	// Load configuration
	cfg, err := config.LoadConfig("config-test-quic.yaml")
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Load token
	tokenBytes, err := ioutil.ReadFile("token1-clean.txt")
	if err != nil {
		log.Fatalf("Failed to read token: %v", err)
	}
	token := string(tokenBytes)

	fmt.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n")
	fmt.Printf("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤)\n", len(token))

	// Create auth manager
	authConfig := &auth.AuthConfig{
		Type:           cfg.Auth.Type,
		Secret:         cfg.Auth.Secret,
		FallbackSecret: cfg.Auth.FallbackSecret,
		SkipValidation: cfg.Auth.SkipValidation,
	}
	authManager, err := auth.NewAuthManager(authConfig)
	if err != nil {
		log.Fatalf("Failed to create auth manager: %v", err)
	}

	// Validate token
	validatedToken, err := authManager.ValidateToken(token)
	if err != nil {
		log.Fatalf("Failed to validate token: %v", err)
	}

	fmt.Printf("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω\n")

	// Extract tenant ID from token
	claims, ok := validatedToken.Claims.(*auth.Claims)
	if !ok {
		log.Fatalf("Invalid token claims")
	}

	tenantID := claims.TenantID
	peerID := fmt.Sprintf("test-peer-%d", time.Now().UnixNano())

	fmt.Printf("‚úÖ Tenant ID: %s\n", tenantID)
	fmt.Printf("‚úÖ Peer ID: %s\n", peerID)

	// Create API manager configuration
	apiConfig := &api.ManagerConfig{
		BaseURL:            cfg.API.BaseURL,
		HeartbeatURL:       cfg.API.HeartbeatURL,
		InsecureSkipVerify: cfg.API.InsecureSkipVerify,
		Timeout:            cfg.API.Timeout,
		MaxRetries:         cfg.API.MaxRetries,
		BackoffMultiplier:  cfg.API.BackoffMultiplier,
		MaxBackoff:         cfg.API.MaxBackoff,
		Token:              token,
		TenantID:           tenantID,
		HeartbeatInterval:  cfg.P2P.HeartbeatInterval,
	}

	fmt.Printf("‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞\n")
	fmt.Printf("   - Base URL: %s\n", apiConfig.BaseURL)
	fmt.Printf("   - Heartbeat URL: %s\n", apiConfig.HeartbeatURL)
	fmt.Printf("   - Heartbeat Interval: %v\n", apiConfig.HeartbeatInterval)

	// Create API manager
	apiManager := api.NewManager(apiConfig, authManager, &testLogger{})

	fmt.Printf("‚úÖ API Manager —Å–æ–∑–¥–∞–Ω\n")

	// Test heartbeat request
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	heartbeatReq := &api.HeartbeatRequest{
		Status:         "active",
		RelaySessionID: fmt.Sprintf("test-session-%d", time.Now().UnixNano()),
		LastSeen:       time.Now().UTC().Format(time.RFC3339),
	}

	fmt.Printf("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É heartbeat...\n")
	fmt.Printf("   - Status: %s\n", heartbeatReq.Status)
	fmt.Printf("   - Relay Session ID: %s\n", heartbeatReq.RelaySessionID)
	fmt.Printf("   - Last Seen: %s\n", heartbeatReq.LastSeen)

	// Try to send heartbeat
	resp, err := apiManager.SendHeartbeat(ctx, tenantID, peerID, token, heartbeatReq)
	if err != nil {
		fmt.Printf("‚ùå Heartbeat failed: %v\n", err)
		fmt.Printf("   –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ relay —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n")
	} else {
		fmt.Printf("‚úÖ Heartbeat —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n")
		fmt.Printf("   - Success: %t\n", resp.Success)
		if resp.Error != "" {
			fmt.Printf("   - Error: %s\n", resp.Error)
		}
	}

	fmt.Println("\nüìã –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ê")
	fmt.Println("===============")
	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è heartbeat —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
	fmt.Println("‚úÖ API Manager –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç heartbeat")
	fmt.Println("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
	fmt.Println("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç tenant_id")

	if err != nil {
		fmt.Println("‚ö†Ô∏è  Relay —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
		fmt.Println("   - Heartbeat –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
	} else {
		fmt.Println("‚úÖ Heartbeat —Ä–∞–±–æ—Ç–∞–µ—Ç —Å relay —Å–µ—Ä–≤–µ—Ä–æ–º")
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}
