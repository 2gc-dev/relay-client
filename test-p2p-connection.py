#!/usr/bin/env python3
"""
–¢–µ—Å—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Relay QUIC
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: Client A ‚Üê‚Üí QUIC:9090 ‚Üê‚Üí Relay ‚Üê‚Üí QUIC:9090 ‚Üê‚Üí Client B
"""

import socket
import time
import json
import threading
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RELAY_HOST = "edge.2gc.ru"
RELAY_PORT = 9090
BUFFER_SIZE = 65507
TIMEOUT = 10

class P2PClient:
    def __init__(self, client_id, relay_host, relay_port):
        self.client_id = client_id
        self.relay_host = relay_host
        self.relay_port = relay_port
        self.sock = None
        self.running = False
        self.received_messages = []
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ relay —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.settimeout(TIMEOUT)
            self.running = True
            print(f"‚úÖ {self.client_id}: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ relay {self.relay_host}:{self.relay_port}")
            return True
        except Exception as e:
            print(f"‚ùå {self.client_id}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send_message(self, message, target_client=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ relay"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
            packet = {
                "from": self.client_id,
                "to": target_client or "broadcast",
                "message": message,
                "timestamp": datetime.now().isoformat()
            }
            
            data = json.dumps(packet).encode('utf-8')
            self.sock.sendto(data, (self.relay_host, self.relay_port))
            print(f"üì§ {self.client_id}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message}' -> {target_client or 'broadcast'}")
            return True
        except Exception as e:
            print(f"‚ùå {self.client_id}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"üëÇ {self.client_id}: –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...")
        while self.running:
            try:
                data, addr = self.sock.recvfrom(BUFFER_SIZE)
                packet = json.loads(data.decode('utf-8'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º
                if packet.get("to") == self.client_id or packet.get("to") == "broadcast":
                    self.received_messages.append(packet)
                    print(f"üì• {self.client_id}: –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {packet.get('from')}: '{packet.get('message')}'")
                else:
                    print(f"üì® {self.client_id}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {packet.get('to')}")
                    
            except socket.timeout:
                continue
            except Exception as e:
                if self.running:
                    print(f"‚ùå {self.client_id}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
                break
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç relay"""
        self.running = False
        if self.sock:
            self.sock.close()
        print(f"üîå {self.client_id}: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç relay")

def test_basic_communication():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_a = P2PClient("Client-A", RELAY_HOST, RELAY_PORT)
    client_b = P2PClient("Client-B", RELAY_HOST, RELAY_PORT)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if not client_a.connect() or not client_b.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    thread_a = threading.Thread(target=client_a.listen, daemon=True)
    thread_b = threading.Thread(target=client_b.listen, daemon=True)
    
    thread_a.start()
    thread_b.start()
    
    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    
    # –¢–µ—Å—Ç 1: Client A –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Client B
    print("\nüìã –¢–µ—Å—Ç 1.1: Client A -> Client B")
    client_a.send_message("Hello from Client A!", "Client-B")
    time.sleep(2)
    
    # –¢–µ—Å—Ç 2: Client B –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Client A
    print("\nüìã –¢–µ—Å—Ç 1.2: Client B -> Client A")
    client_b.send_message("Hello from Client B!", "Client-A")
    time.sleep(2)
    
    # –¢–µ—Å—Ç 3: Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\nüìã –¢–µ—Å—Ç 1.3: Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ")
    client_a.send_message("Broadcast message from Client A")
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"Client A –ø–æ–ª—É—á–∏–ª {len(client_a.received_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"Client B –ø–æ–ª—É—á–∏–ª {len(client_b.received_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    client_a.disconnect()
    client_b.disconnect()
    
    return len(client_a.received_messages) > 0 and len(client_b.received_messages) > 0

def test_multiple_clients():
    """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
    print("=" * 50)
    
    clients = []
    threads = []
    
    # –°–æ–∑–¥–∞–µ–º 3 –∫–ª–∏–µ–Ω—Ç–æ–≤
    for i in range(3):
        client = P2PClient(f"Client-{i+1}", RELAY_HOST, RELAY_PORT)
        if client.connect():
            clients.append(client)
            thread = threading.Thread(target=client.listen, daemon=True)
            threads.append(thread)
            thread.start()
    
    if len(clients) < 2:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return False
    
    time.sleep(1)
    
    # –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É
    for i, client in enumerate(clients):
        next_client = clients[(i + 1) % len(clients)]
        client.send_message(f"Message from {client.client_id}", next_client.client_id)
        time.sleep(1)
    
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for client in clients:
        print(f"{client.client_id} –ø–æ–ª—É—á–∏–ª {len(client.received_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    for client in clients:
        client.disconnect()
    
    return all(len(client.received_messages) > 0 for client in clients)

def test_latency():
    """–¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
    print("=" * 50)
    
    client_a = P2PClient("Latency-A", RELAY_HOST, RELAY_PORT)
    client_b = P2PClient("Latency-B", RELAY_HOST, RELAY_PORT)
    
    if not client_a.connect() or not client_b.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    thread_b = threading.Thread(target=client_b.listen, daemon=True)
    thread_b.start()
    time.sleep(1)
    
    latencies = []
    for i in range(10):
        start_time = time.perf_counter()
        client_a.send_message(f"Ping {i+1}", "Latency-B")
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        timeout = time.time() + 5
        while time.time() < timeout:
            if len(client_b.received_messages) > i:
                end_time = time.perf_counter()
                latency = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                latencies.append(latency)
                print(f"Ping {i+1}: {latency:.2f}ms")
                break
            time.sleep(0.1)
        else:
            print(f"Ping {i+1}: Timeout")
    
    if latencies:
        avg_latency = sum(latencies) / len(latencies)
        min_latency = min(latencies)
        max_latency = max(latencies)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏:")
        print(f"–°—Ä–µ–¥–Ω—è—è: {avg_latency:.2f}ms")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_latency:.2f}ms")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_latency:.2f}ms")
    
    client_a.disconnect()
    client_b.disconnect()
    
    return len(latencies) > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Relay QUIC")
    print("=" * 60)
    print(f"Relay —Å–µ—Ä–≤–µ—Ä: {RELAY_HOST}:{RELAY_PORT}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        results.append(("–ë–∞–∑–æ–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", test_basic_communication()))
        results.append(("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", test_multiple_clients()))
        results.append(("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏", test_latency()))
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:<25}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ relay —Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    main()


