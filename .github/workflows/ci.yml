name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.25'

jobs:
  # Stage 1: Code Quality Checks (parallel)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify go.mod tidy
        run: |
          go mod tidy
          git diff --exit-code -- go.mod go.sum

      - name: Run go vet
        run: go vet ./...

      - name: Install and run golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
          golangci-lint run --timeout=10m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  security:
    name: Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || echo "Vulnerabilities found but continuing"

      - name: Run gosec
        uses: securego/gosec@v2.22.0
        continue-on-error: true
        with:
          args: '-fmt sarif -out gosec.sarif -timeout 5m ./...'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec.sarif') != ''
        with:
          sarif_file: gosec.sarif

  # Stage 2: Build Test (simple compile check)
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test compilation
        run: |
          echo "Testing that code compiles successfully..."
          go build -v ./cmd/cloudbridge-client/
          go build -v ./cmd/quic-tester/
          echo "âœ… All binaries compile successfully"

      - name: Clean up test binaries
        run: rm -f cloudbridge-client quic-tester
