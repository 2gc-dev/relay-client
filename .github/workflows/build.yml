name: Build and Test CloudBridge Client

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests (non-privileged)
      run: go test -v ./pkg/... -tags=mock

    - name: Run linter (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        go vet ./...
        test -z "$(gofmt -s -l . | grep -v vendor/)"

    - name: Run linter (Windows)
      if: runner.os == 'Windows'
      run: |
        go vet ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_suffix: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: ".exe"
          - os: windows-latest
            goos: windows
            goarch: arm64
            binary_suffix: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_suffix: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -v -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildType=release -X main.buildOS=${{ matrix.goos }} -X main.buildArch=${{ matrix.goarch }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o cloudbridge-client-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.binary_suffix }} ./cmd/cloudbridge-client

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cloudbridge-client-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cloudbridge-client-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.binary_suffix }}

  integration-test:
    name: Integration Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: Download artifacts (Linux)
      if: runner.os == 'Linux'
      uses: actions/download-artifact@v3
      with:
        name: cloudbridge-client-linux-amd64
        path: .

    - name: Download artifacts (Windows)
      if: runner.os == 'Windows'
      uses: actions/download-artifact@v3
      with:
        name: cloudbridge-client-windows-amd64
        path: .

    - name: Make binary executable (Linux)
      if: runner.os == 'Linux'
      run: chmod +x cloudbridge-client-linux-amd64

    - name: Test binary execution (Linux)
      if: runner.os == 'Linux'
      run: |
        ./cloudbridge-client-linux-amd64 version
        ./cloudbridge-client-linux-amd64 --help

    - name: Test binary execution (Windows)
      if: runner.os == 'Windows'
      run: |
        .\cloudbridge-client-windows-amd64.exe version
        .\cloudbridge-client-windows-amd64.exe --help

    - name: Install WireGuard (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard-tools
        wg --version

    - name: Install WireGuard (Windows)
      if: runner.os == 'Windows'
      run: |
        # Download and install WireGuard for Windows
        Invoke-WebRequest -Uri "https://download.wireguard.com/windows-client/wireguard-installer.exe" -OutFile "wireguard-installer.exe"
        Start-Process -FilePath "wireguard-installer.exe" -ArgumentList "/S" -Wait
        # Add to PATH for this session
        $env:PATH += ";C:\Program Files\WireGuard"
        wg.exe --version

    - name: Test WireGuard integration (Linux)
      if: runner.os == 'Linux'
      run: |
        # Test WireGuard availability (without actually creating interfaces)
        echo "Testing WireGuard tools availability..."
        which wg
        which ip
        echo "WireGuard tools are available"

    - name: Test WireGuard integration (Windows)
      if: runner.os == 'Windows'
      run: |
        # Test WireGuard availability
        Write-Host "Testing WireGuard tools availability..."
        Get-Command wg.exe
        Write-Host "WireGuard tools are available"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cloudbridge-client-linux-amd64/cloudbridge-client-linux-amd64
          cloudbridge-client-linux-arm64/cloudbridge-client-linux-arm64
          cloudbridge-client-windows-amd64/cloudbridge-client-windows-amd64.exe
          cloudbridge-client-windows-arm64/cloudbridge-client-windows-arm64.exe
          cloudbridge-client-darwin-amd64/cloudbridge-client-darwin-amd64
          cloudbridge-client-darwin-arm64/cloudbridge-client-darwin-arm64
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
