#!/bin/bash

# –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Relay —Å–µ—Ä–≤–µ—Ä–∞ —Å P2P –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: heartbeat, P2P –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é, QUIC relay

echo "üöÄ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Relay —Å–µ—Ä–≤–µ—Ä–∞ —Å P2P –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"
echo "======================================================"
echo "–í—Ä–µ–º—è: $(date)"
echo

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server_availability() {
    local url=$1
    local name=$2
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º $name..."
    if curl -s --connect-timeout 10 "$url" > /dev/null 2>&1; then
        echo "‚úÖ $name –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        echo "‚ùå $name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
echo "‚è≥ –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Relay —Å–µ—Ä–≤–µ—Ä–∞..."
while ! check_server_availability "http://edge.2gc.ru:8082/health" "P2P API"; do
    echo "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥..."
    sleep 30
done

echo
echo "üéâ Relay —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
echo

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Health endpoints
echo "üìä 1. –ü–†–û–í–ï–†–ö–ê HEALTH ENDPOINTS"
echo "================================"

echo "HTTP API Health:"
curl -s "http://edge.2gc.ru:8080/health" | python3 -m json.tool 2>/dev/null || echo "HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo
echo "P2P API Health:"
curl -s "http://edge.2gc.ru:8082/health" | python3 -m json.tool 2>/dev/null || echo "P2P API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Heartbeat API
echo
echo "üíì 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HEARTBEAT API"
echo "================================"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
TEST_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZhbGxiYWNrLWtleSJ9.eyJwcm90b2NvbF90eXBlIjoicDJwLW1lc2giLCJzY29wZSI6InAycC1tZXNoLWNsYWltcyIsIm9yZ19pZCI6InRlbmFudC0yMTY0MjAxNjUiLCJ0ZW5hbnRfaWQiOiJ0ZW5hbnQtMjE2NDIwMTY1Iiwic2VydmVyX2lkIjoic2VydmVyLTE3NTgyMTkxOTU3MDMiLCJjb25uZWN0aW9uX3R5cGUiOiJxdWljLWljZSIsIm1heF9wZWVycyI6IjEwIiwicGVybWlzc2lvbnMiOlsibWVzaF9qb2luIiwibWVzaF9tYW5hZ2UiXSwibmV0d29ya19jb25maWciOnsic3VibmV0IjoiMTAuMC4wLjAvMjQiLCJnYXRld2F5IjoiMTAuMC4wLjEiLCJkbnMiOlsiOC44LjguOCIsIjEuMS4xLjEiXSwibXR1IjoxNDIwLCJmaXJld2FsbF9ydWxlcyI6WyJhbGxvd19zc2giLCJhbGxvd19odHRwIl0sImVuYWJsZV9pcHY2IjpmYWxzZX0sInF1aWNfY29uZmlnIjp7ImhhbmRzaGFrZV90aW1lb3V0IjoiMTBzIiwiaWRsZV90aW1lb3V0IjoiMzBzIiwibWF4X3N0cmVhbXMiOjEwMCwiY29ubmVjdGlvbl9taWdyYXRpb24iOnRydWUsIm11bHRpcGxleGluZyI6dHJ1ZX0sImljZV9jb25maWciOnsic3R1bl9zZXJ2ZXJzIjpbImVkZ2UuMmdjLnJ1OjE5MzAyIl0sInR1cm5fc2VydmVycyI6W10sImljZV90aW1lb3V0IjoiMzBzIiwiY29ubmVjdGlvbl90aW1lb3V0IjoiMTBzIiwiZ2F0aGVyaW5nX3RpbWVvdXQiOiI1cyIsImNhbmRpZGF0ZV90eXBlcyI6WyJob3N0Iiwic3JmbHgiLCJyZWxheSJdfSwibWFzcXVlX2NvbmZpZyI6eyJlbmFibGVkIjp0cnVlLCJwcm94eV91cmwiOiJodHRwczovL2VkZ2UuMmdjLnJ1Ojg0NDMiLCJhbHBuX3Byb3RvY29scyI6WyJoMyIsImgzLTI5Il0sImZhbGxiYWNrX2VuYWJsZWQiOnRydWV9LCJtZXNoX2NvbmZpZyI6eyJuZXR3b3JrX2lkIjoibWVzaC1uZXR3b3JrLTAwMSIsInN1Ym5ldCI6IjEwLjAuMC4wLzE2IiwicmVnaXN0cnlfdXJsIjoiaHR0cHM6Ly9lZGdlLjJnYy5ydTo4MDgwIiwiaGVhcnRiZWF0X2ludGVydmFsIjoiMzBzIiwibWF4X3BlZXJzIjoxMCwicm91dGluZ19zdHJhdGVneSI6InBlcmZvcm1hbmNlX29wdGltYWwiLCJlbmFibGVfYXV0b19kaXNjb3ZlcnkiOnRydWUsInRydXN0X2xldmVsIjoiYmFzaWMifSwicGVlcl93aGl0ZWxpc3QiOlsicGVlci0wMDEiLCJwZWVyLTAwMiIsInBlZXItMDAzIl0sInJlbGF5X2VuZHBvaW50cyI6eyJodHRwX2FwaSI6ImVkZ2UuMmdjLnJ1OjgwODAiLCJwMnBfYXBpIjoiZWRnZS4yZ2MucnU6ODA4MiIsInF1aWNfdHJhbnNwb3J0IjoiZWRnZS4yZ2MucnU6OTA5MCIsInN0dW5fc2VydmVyIjoiZWRnZS4yZ2MucnU6MTkzMDIiLCJtYXNxdWVfcHJveHkiOiJlZGdlLjJnYy5ydTo4NDQzIiwiZW5oYW5jZWRfcXVpYyI6ImVkZ2UuMmdjLnJ1OjkwOTIifSwiaWF0IjoxNzU4MjE5MTk4LCJpc3MiOiJodHRwczovL2F1dGguMmdjLnJ1L3JlYWxtcy9jbG91ZGJyaWRnZSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJzZXJ2ZXItY2xpZW50LXNlcnZlci0xNzU4MjE5MTk1NzAzIiwianRpIjoiand0XzE3NTgyMTkxOTgxMDlfbXoxdDhyc2RhIn0.d-o1yXtZOlnyv53Uhg5zEI3l3IRbQV27VdnEQIn5w_4"

echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º Heartbeat API..."
echo "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ä–∞..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º heartbeat endpoint
curl -X POST "http://edge.2gc.ru:8080/api/v1/tenants/tenant-216420165/peers/test-peer/heartbeat" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TEST_TOKEN" \
  -d '{"status": "online", "last_seen": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
  -w "\nHTTP Status: %{http_code}\n" 2>/dev/null || echo "Heartbeat API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo
echo "–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∏—Ä–∞..."
curl -s "http://edge.2gc.ru:8080/api/v1/tenants/tenant-216420165/peers/test-peer/status" \
  -H "Authorization: Bearer $TEST_TOKEN" | python3 -m json.tool 2>/dev/null || echo "Status API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo
echo "–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É tenant'–∞..."
curl -s "http://edge.2gc.ru:8080/api/v1/tenants/tenant-216420165/stats" \
  -H "Authorization: Bearer $TEST_TOKEN" | python3 -m json.tool 2>/dev/null || echo "Stats API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º P2P API
echo
echo "üîó 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï P2P API"
echo "=========================="

echo "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ä–∞..."
curl -X POST "http://edge.2gc.ru:8082/api/v1/tenants/tenant-216420165/peers/register" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TEST_TOKEN" \
  -d '{
    "peer_id": "test-peer-1",
    "public_key": "test-public-key-1",
    "endpoint": "192.168.1.100:9090",
    "capabilities": ["quic", "ice"]
  }' \
  -w "\nHTTP Status: %{http_code}\n" 2>/dev/null || echo "Register API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo
echo "–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∏—Ä—ã..."
curl -s "http://edge.2gc.ru:8082/api/v1/tenants/tenant-216420165/peers/discover" \
  -H "Authorization: Bearer $TEST_TOKEN" | python3 -m json.tool 2>/dev/null || echo "Discover API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
echo
echo "üöÄ 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QUIC –°–û–ï–î–ò–ù–ï–ù–ò–ô"
echo "=================================="

echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º QUIC –ø–æ—Ä—Ç 9090..."
python3 -c "
import socket
import time
import json

def test_quic_connection():
    print('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ QUIC –ø–æ—Ä—Ç...')
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(5)
    
    try:
        message = {
            'type': 'test',
            'from': 'test-client',
            'message': 'Hello from updated relay test',
            'timestamp': time.time()
        }
        
        data = json.dumps(message).encode('utf-8')
        sock.sendto(data, ('edge.2gc.ru', 9090))
        print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        
        response, addr = sock.recvfrom(1024)
        print(f'‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {addr}: {response.decode(\"utf-8\")[:100]}...')
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        return False
    finally:
        sock.close()

test_quic_connection()
"

# 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è P2P –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
echo
echo "üë• 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï P2P –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò"
echo "===================================="

echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
pkill -f cloudbridge-client 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
echo "–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç..."
TOKEN1=$(cat token1-clean.txt)
./cloudbridge-client p2p --config config-test-quic.yaml --token "$TOKEN1" --log-level debug > client-local-updated.log 2>&1 &
LOCAL_PID=$!
echo "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç PID: $LOCAL_PID"

# –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
sleep 10

# –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
echo "–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç..."
ssh -F ~/.ssh/config zabbix-server << 'EOF'
cd ~
pkill -f cloudbridge-client 2>/dev/null || true
./cloudbridge-client p2p --config config.yaml --token $(cat token.txt) --log-level debug > client-remote-updated.log 2>&1 &
CLIENT_PID=$!
echo "–£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç PID: $CLIENT_PID"
echo $CLIENT_PID > client-updated.pid
EOF

# –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
echo "–ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
echo
echo "üìä –°–¢–ê–¢–£–° –ö–õ–ò–ï–ù–¢–û–í"
echo "=================="

echo "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:"
if ps -p $LOCAL_PID > /dev/null; then
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:"
    tail -10 client-local-updated.log
else
    echo "‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "–õ–æ–≥ –æ—à–∏–±–æ–∫:"
    cat client-local-updated.log
fi

echo
echo "–£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:"
ssh -F ~/.ssh/config zabbix-server << 'EOF'
if [ -f client-updated.pid ]; then
    CLIENT_PID=$(cat client-updated.pid)
    if ps -p $CLIENT_PID > /dev/null; then
        echo "‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $CLIENT_PID)"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:"
        tail -10 client-remote-updated.log
    else
        echo "‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo "–õ–æ–≥ –æ—à–∏–±–æ–∫:"
        cat client-remote-updated.log
    fi
else
    echo "‚ùå PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω –ø–∏—Ä–æ–≤
echo
echo "üë• –ü–†–û–í–ï–†–ö–ê –û–ù–õ–ê–ô–ù –ü–ò–†–û–í"
echo "========================"

echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω –ø–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ P2P API..."
curl -s "http://edge.2gc.ru:8082/health" | python3 -c "
import json
import sys
try:
    data = json.load(sys.stdin)
    print(f'–û–Ω–ª–∞–π–Ω –ø–∏—Ä–æ–≤: {data.get(\"metrics\", {}).get(\"online_peers\", \"N/A\")}')
    print(f'–í—Å–µ–≥–æ –ø–∏—Ä–æ–≤: {data.get(\"metrics\", {}).get(\"total_peers\", \"N/A\")}')
    print(f'–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {data.get(\"metrics\", {}).get(\"active_connections\", \"N/A\")}')
except:
    print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏')
" 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
echo
echo "üõë –û–°–¢–ê–ù–û–í–ö–ê –ö–õ–ò–ï–ù–¢–û–í"
echo "====================="

kill $LOCAL_PID 2>/dev/null || true
ssh -F ~/.ssh/config zabbix-server "if [ -f client-updated.pid ]; then kill \$(cat client-updated.pid) 2>/dev/null || true; fi"

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo
echo "üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢"
echo "=================="
echo "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
echo
echo "–õ–æ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: client-local-updated.log"
echo "–õ–æ–≥–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ zabbix-server"
echo
echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
echo "  ssh -F ~/.ssh/config zabbix-server 'cat client-remote-updated.log'"

echo
echo "‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Relay —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!"

