#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QUIC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 client_quic_test.py
"""

import socket
import time
import json
import sys

# JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
JWT_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiYWNjb3VudCJdLCJjb25uZWN0aW9uX3R5cGUiOiJxdWljIiwiZXhwIjoxNzU4MzY1NDczLCJpYXQiOjE3NTgyNzkwNzMsImlzcyI6Imh0dHBzOi8vYXV0aC4yZ2MucnUvcmVhbG1zL2Nsb3VkYnJpZGdlIiwianRpIjoiand0X3Rlc3RfdG9rZW4iLCJwZXJtaXNzaW9ucyI6WyJwMnBfY29ubmVjdCIsIm1lc2hfam9pbiIsIm1lc2hfbWFuYWdlIl0sInByb3RvY29sX3R5cGUiOiJwMnAtbWVzaCIsInNjb3BlIjoicDJwLW1lc2gtY2xhaW1zIiwic2VydmVyX2lkIjoic2VydmVyLXRlc3QtMTIzIiwic3ViIjoic2VydmVyLXRlc3QtMTIzIiwidGVuYW50X2lkIjoidGVuYW50LXRlc3QtMTIzIn0.2ePguI9tijf1holYraallqe955sHcKi0lndB1zb7OiA"

def test_udp_connection(host, port, timeout=5):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
            sock.settimeout(timeout)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç
            test_message = "QUIC_TEST_PACKET"
            sock.sendto(test_message.encode(), (host, port))
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç: {test_message}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            try:
                data, addr = sock.recvfrom(4096)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {data.decode()[:50]}...")
                print(f"‚úÖ –û—Ç –∞–¥—Ä–µ—Å–∞: {addr}")
                return True
            except socket.timeout:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è UDP)")
                return True  # UDP –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        return False

def test_quic_handshake(host, port, timeout=10):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç QUIC handshake —Å JWT —Ç–æ–∫–µ–Ω–æ–º"""
    print(f"üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º QUIC handshake —Å JWT —Ç–æ–∫–µ–Ω–æ–º...")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
            sock.settimeout(timeout)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω
            auth_message = f"AUTH {JWT_TOKEN}"
            sock.sendto(auth_message.encode(), (host, port))
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω JWT —Ç–æ–∫–µ–Ω: {auth_message[:50]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            try:
                data, addr = sock.recvfrom(4096)
                response = data.decode()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                print(f"‚úÖ –û—Ç –∞–¥—Ä–µ—Å–∞: {addr}")
                
                if "AUTH_OK" in response:
                    print("üéâ QUIC handshake —É—Å–ø–µ—à–µ–Ω!")
                    return True
                else:
                    print("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    return False
                    
            except socket.timeout:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ JWT —Ç–æ–∫–µ–Ω")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ QUIC handshake: {e}")
        return False

def test_domain_resolution(domain):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞"""
    print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ {domain}...")
    try:
        import socket
        ip = socket.gethostbyname(domain)
        print(f"‚úÖ –î–æ–º–µ–Ω {domain} —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –≤ IP: {ip}")
        return ip
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {e}")
        return None

def main():
    print("üß™ –¢–ï–°–¢ QUIC –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
    domain = "b1.2gc.space"
    ip = test_domain_resolution(domain)
    
    if not ip:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω")
        return
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {domain} ({ip})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    udp_success = test_udp_connection(domain, 9091)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º QUIC handshake
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç QUIC handshake:")
    quic_success = test_quic_handshake(domain, 9091)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä—è–º—ã–º IP
    print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø—Ä—è–º—ã–º IP {ip}:")
    udp_success_ip = test_udp_connection(ip, 9091)
    quic_success_ip = test_quic_handshake(ip, 9091)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–¥–æ–º–µ–Ω): {'–£—Å–ø–µ—à–Ω–æ' if udp_success else '–ù–µ—É–¥–∞—á–Ω–æ'}")
    print(f"‚úÖ QUIC handshake (–¥–æ–º–µ–Ω): {'–£—Å–ø–µ—à–Ω–æ' if quic_success else '–ù–µ—É–¥–∞—á–Ω–æ'}")
    print(f"‚úÖ UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (IP): {'–£—Å–ø–µ—à–Ω–æ' if udp_success_ip else '–ù–µ—É–¥–∞—á–Ω–æ'}")
    print(f"‚úÖ QUIC handshake (IP): {'–£—Å–ø–µ—à–Ω–æ' if quic_success_ip else '–ù–µ—É–¥–∞—á–Ω–æ'}")
    
    if udp_success and udp_success_ip:
        print("\nüéâ UDP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("‚úÖ QUIC —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ LoadBalancer —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        if quic_success or quic_success_ip:
            print("‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è  QUIC handshake –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è UDP)")
    else:
        print("\n‚ö†Ô∏è  UDP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ LoadBalancer")

if __name__ == "__main__":
    main()
