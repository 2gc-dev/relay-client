package main

import (
	"context"
	"crypto/tls"
	"log"
	"time"

	"github.com/quic-go/quic-go"
)

func main() {
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	addr := "95.163.250.190:5553"
	
	// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	tlsConf := &tls.Config{
		InsecureSkipVerify: true,
		NextProtos:         []string{"h3-27"},
	}
	
	// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è QUIC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	quicConf := &quic.Config{
		HandshakeIdleTimeout: 60 * time.Second,
		KeepAlivePeriod:      30 * time.Second,
		MaxIdleTimeout:       60 * time.Second,
	}

	log.Printf("üß™ –ü—Ä–æ—Å—Ç–æ–π QUIC —Ç–µ—Å—Ç –∫ %s", addr)
	log.Printf("üìã TLS: InsecureSkipVerify=true, NextProtos=[h3-27]")
	log.Printf("üìã QUIC: HandshakeIdleTimeout=60s")

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	ctx, cancel := context.WithTimeout(context.Background(), 70*time.Second)
	defer cancel()

	log.Printf("üîå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
	start := time.Now()
	
	conn, err := quic.DialAddr(ctx, addr, tlsConf, quicConf)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		log.Printf("‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏: %v", time.Since(start))
		return
	}
	defer conn.CloseWithError(0, "test done")

	duration := time.Since(start)
	log.Printf("‚úÖ QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
	log.Printf("‚è±Ô∏è  –í—Ä–µ–º—è handshake: %v", duration)
	log.Printf("üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %s", conn.LocalAddr())
	log.Printf("üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s", conn.RemoteAddr())
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º TLS —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	tlsState := conn.ConnectionState().TLS
	log.Printf("üîê TLS –≤–µ—Ä—Å–∏—è: %x", tlsState.Version)
	log.Printf("üîê ALPN –ø—Ä–æ—Ç–æ–∫–æ–ª: %q", tlsState.NegotiatedProtocol)
	log.Printf("üîê Cipher suite: %x", tlsState.CipherSuite)

	log.Printf("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}
